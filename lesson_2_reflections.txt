What happens when you initialize a repository? Why do you need to do it?

- .git diretory is created.


How is the staging area different from the working directory and the repository?
What value do you think it offers?


- Staging area is a bit conceptual. But it also gives you control to experiment in the working directory
and selectively decide what should be added to a repository.

- staging area allows total control over what is commited. This is valuable because one
may work on more than one logical change at a time.

How can you use the staging area to make sure you have one commit per logical
change?

- you can use the staging area to control what files are in a particular commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

- branches allow long term development of new features while allowing bug fixes.
- Also allows for several versions of code.

How do the diagrams help you visualize the branch structure?

- diagrams allow one to visually see and understand branches.
- Diagrams also let you see unreachable commits

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

- Merging branches merges two (or more) lines of code development. Merging acts on commits.
- Merging and branches allow for parallel development of various features.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
